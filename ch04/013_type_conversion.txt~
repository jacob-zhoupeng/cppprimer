隐式类型转换：
  C++ 定义了一组内置类型对象之间的标准转换在必要时它们被编译器隐式地应用到对
  象上隐式类型转换发生在下列这些典型的情况下：
    *在混合类型的算术表达式中在这种情况下最宽的数据类型成为目标转换类型这也
	被称为算术转换arithmetic conversion 例如:
    int ival = 3; 
    double dval = 3.14159; 
    // ival被提升为double 类型: 3.0 
    ival + dval;
    *用一种类型的表达式赋值给另一种类型的对象在这种情况下目标转换类型是被赋值
	对象的类型例如在下面第一个赋值中文字常量0的类型是int 它被转换成int*型的指
	针表示空地址在第二个赋值中double型的值被截取成int型的值。
    // 0被转换成int*类型的空指针值
    int* pi = 0; 
    // dval被截取为int值3 
    ival = dval; 
    *把一个表达式传递给一个函数调用表达式的类型与形式参数的类型不相同在这种情
	况下目标转换类型是形式参数的类型例如:
    extern double sqrt( double ); 
    // 2被提升为 double 类型: 2.0 
    cout << "The square root of 2 is " 
        << sqrt( 2 ) << endl; 
    *从一个函数返回一个表达式表达式的类型与返回类型不相同在这种情况下目标转换
	类型是函数的返回类型例如:
    double difference( int ival1, int ival2 ) { 
        // 返回值被提升为double类型
        return ival1 - ival2; 
    }

